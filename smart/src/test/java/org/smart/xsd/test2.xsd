<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!--tyd文件本身是xml文件，第一行是xml声明 -->
<ty:schema xmlns="http://www.tianyuan.org/schema/ok" xmlns:ty="http://www.w3.org/2001/XMLSchema"
	targetNamespace="http://www.tianyuan.org/schema/ok" elementFormDefault="qualified">
	<!-- tyd作为xml文件，其根元素是schema 属性xmlns:ty="http://www.w3.org/2001/XMLSchema" 
		是引入文档约束的，表示在当前文档导入"http://www.w3.org/2001/XMLSchema"中所描述的规则， 并且使用里面的元素要添加tyd的前缀（和xmlns:tyd相对应，也可以指定其它前缀） 
		属性targetNamespace="http://www.tianyuan.org/schema/ok" 表示当前文档定义的规则处于命名空间"http://www.tianyuan.org/schema/ok"下面， 
		xml文档如需要导入当前文档的规则，就可以指定这个命名空间 属性xmlns="http://www.tianyuan.org/schema/ok" 
		表示在当前文档中导入"http://www.tianyuan.org/schema/ok" 命名空间下所描述的规则（即当前文档本身描述的规则），并且无需使用前缀，也即默认命名空间， 
		这样，在当前文档就可以直接引用所定义的元素了 属性 elementFormDefault="qualified" 指出任何 XML 实例文档所使用的且在此 
		schema 中声明过的元素必须被命名空间限定。 -->

	<!-- 用户 -->
	<ty:element name="user" type="ty:string"></ty:element>
	<ty:attribute name="lang" type="ty:string" />



	<ty:element name="age">
		<ty:simpleType>
			<ty:restriction base="ty:integer">
				<ty:minInclusive value="0" />
				<ty:maxInclusive value="120" />
			</ty:restriction>
		</ty:simpleType>
	</ty:element>

	<ty:element name="cars">
		<ty:simpleType>
			<ty:restriction base="ty:string">
				<ty:enumeration value="Audi" />
				<ty:enumeration value="Golf" />
				<ty:enumeration value="BMW" />
			</ty:restriction>
		</ty:simpleType>
	</ty:element>

	<ty:element name="car" type="carType" />

	<ty:simpleType name="carType">
		<ty:restriction base="ty:string">
			<ty:enumeration value="Audi" />
			<ty:enumeration value="Golf" />
			<ty:enumeration value="BMW" />
		</ty:restriction>
	</ty:simpleType>

	<ty:element name="letter">
		<ty:simpleType>
			<ty:restriction base="ty:string">
				<ty:pattern value="[a-z]" /><!-- value ：正则表达式 -->
			</ty:restriction>
		</ty:simpleType>
	</ty:element>
	<!-- <ty:whiteSpace value="replace" /> 格式 <ty:length value="8"/> 长度 <ty:minLength 
		value="5"/> <ty:maxLength value="8"/> whiteSpace 限定被设置为 "replace"，这意味着 XML 
		处理器将移除所有空白字符（换行、回车、空格以及制表符）： 这个 whiteSpace 限定被设置为 "collapse"，这意味着 XML 处理器将移除所有空白字符（换行、回车、 
		空格以及制表符会被替换为空格，开头和结尾的空格会被移除，而多个连续的空格会被缩减为一个单一的空格）： -->
	<ty:element name="address">
		<ty:simpleType>
			<ty:restriction base="ty:string">
				<ty:whiteSpace value="replace" />
			</ty:restriction>
		</ty:simpleType>
	</ty:element>
	<!-- 复合元素：多个元素 <sequence>:按次序出现 extension：扩展 -->
	<ty:element name="employees">
		<ty:complexType>
			<ty:sequence>
				<ty:element name="firstname" type="ty:string" />
				<ty:element name="lastname" type="ty:string" />
			</ty:sequence>
		</ty:complexType>
	</ty:element>

	<ty:element name="employee" type="personinfo" />

	<ty:complexType name="personinfo">
		<ty:sequence>
			<ty:element name="firstname" type="ty:string" />
			<ty:element name="lastname" type="ty:string" />
		</ty:sequence>
	</ty:complexType>

	<ty:element name="employee2" type="fullpersoninfo" />

	<ty:complexType name="personinfo2">
		<ty:sequence>
			<ty:element name="firstname" type="ty:string" />
			<ty:element name="lastname" type="ty:string" />
		</ty:sequence>
	</ty:complexType>

	<ty:complexType name="fullpersoninfo">
		<ty:complexContent>
			<ty:extension base="personinfo2">
				<ty:sequence>
					<ty:element name="address" type="ty:string" />
					<ty:element name="city" type="ty:string" />
					<ty:element name="country" type="ty:string" />
				</ty:sequence>
			</ty:extension>
		</ty:complexContent>
	</ty:complexType>

	<!-- 复合空元素 -->
	<ty:element name="product" type="prodtype" />

	<ty:complexType name="prodtype">
		<ty:attribute name="prodid" type="ty:positiveInteger" />
	</ty:complexType>


	<!-- 复合带内容 -->
	<ty:element name="shoesize">
		<ty:complexType>
			<ty:simpleContent>
				<ty:extension base="ty:integer"><!-- 带内容 -->
					<ty:attribute name="country" type="ty:string" />
				</ty:extension>
			</ty:simpleContent>
		</ty:complexType>
	</ty:element>

	<!-- 复合带复杂内容
	 <letter> 
	 	Dear Mr.<name>John Smith</name>
	 	. Your order <orderid>1032</orderid> 
		will be shipped on <shipdate>2001-07-13</shipdate>. 
		</letter> 
	-->
	<ty:element name="letters" type="lettertype" />

	<ty:complexType name="lettertype" mixed="true">
		<ty:sequence>
			<ty:element name="name" type="ty:string" />
			<ty:element name="orderid" type="ty:positiveInteger" />
			<ty:element name="shipdate" type="ty:date" />
		</ty:sequence>
	</ty:complexType>
</ty:schema>
